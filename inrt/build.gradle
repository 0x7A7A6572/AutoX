import java.nio.charset.Charset

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'



Properties properties = new Properties()
properties.load( new InputStreamReader(new FileInputStream("E:/资料/jks/autojs-inrt/sign.properties"), Charset.forName("utf-8")))
android {
    compileSdkVersion versions.compile
    buildToolsVersion versions.buildTool

    defaultConfig {
        applicationId "com.stardust.auojs.inrt"
        minSdkVersion versions.mini
        targetSdkVersion versions.target
        versionCode versions.appVersionCode
        versionName versions.appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "armeabi-v7a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }
    signingConfigs {
        release{
            keyAlias properties['keyAlias']
            keyPassword properties['keyPassword']
            storeFile file(properties['storeFile'])
            storePassword properties['storePassword']
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

}



def buildApkPluginForAbi(File pluginProjectDir, String abi) {
    copy {
        from file('..\\app\\release\\')
        into new File(pluginProjectDir, 'app\\src\\main\\assets')
        def fileName = "inrt-" + abi + "-release.apk"
        include fileName
        rename fileName, 'template.apk'
    }
    exec {
        workingDir pluginProjectDir
        commandLine 'gradlew.bat', 'assembleRelease'
    }
    copy {
        from new File(pluginProjectDir, 'app\\build\\outputs\\apk\\release')
        into file('..\\common\\release')
        def fileName = '打包插件-' + versions.appVersionName + '-release.apk'
        include fileName
        rename fileName, '打包插件-' + abi + '-' + versions.appVersionName + '-release.apk'
    }
}

task buildApkPlugin {
    doLast {
        def pluginProjectDirPath = '..\\..\\AutoJsApkBuilderPlugin'
        def pluginProjectDir = file(pluginProjectDirPath)
        if (!pluginProjectDir.exists() || !pluginProjectDir.isDirectory()) {
            println '插件目录 pluginProjectDir not exists'
            return
        }
        buildApkPluginForAbi(pluginProjectDir, 'armeabi-v7a')
        buildApkPluginForAbi(pluginProjectDir, 'x86')
    }
}




tasks.whenTaskAdded { task ->
    println("=================task "+task.name+" added=================")
    if (task.name == 'assembleRelease') {
        task.finalizedBy 'buildApkPlugin'
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    google()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.1-alpha01', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //Glide
    implementation('com.github.bumptech.glide:glide:4.2.0', {
        exclude group: 'com.android.support'
    })
    implementation 'com.google.android.material:material:1.3.0-alpha03'
    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:2.2.3"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.fanjun:keeplive:1.1.22'
    implementation  'com.dhh:websocket2:2.1.4'

    implementation 'com.github.SenhLinsh:Utils-Everywhere:3.0.0'

    testImplementation 'junit:junit:4.12'
    implementation project(':automator')
    implementation project(':common')
    implementation project(':autojs')
}
